import asyncio
import signal
import sys
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from config.settings import settings
from config import webhooks
from database.repository import SignalRepository
from services.queue_service import QueueManager
from services.webhook_service import WebhookClient
from services.worker_service import SignalWorker
from api.endpoints import router as api_router


def handle_shutdown(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    sys.exit(0)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    workers = []
    worker_tasks = []

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        repository = SignalRepository()
        queue_manager = QueueManager()
        webhook_client = WebhookClient()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        repository.init_db()

        # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
        for symbol in webhooks.get_supported_instruments():
            try:
                worker = SignalWorker(symbol, queue_manager, repository, webhook_client)
                workers.append(worker)
                task = asyncio.create_task(worker.run())
                worker_tasks.append(task)
                print(f"‚úÖ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è {symbol}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è {symbol}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.state.repository = repository
        app.state.queue_manager = queue_manager
        app.state.webhook_client = webhook_client
        app.state.workers = workers
        app.state.worker_tasks = worker_tasks

        print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(workers)}/{len(webhooks.get_supported_instruments())} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        print(f"üåê –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://0.0.0.0:{settings.port}/docs")

        yield

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise

    finally:
        # Graceful shutdown
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã...")
        for task in worker_tasks:
            task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        if worker_tasks:
            try:
                await asyncio.wait_for(
                    asyncio.gather(*worker_tasks, return_exceptions=True),
                    timeout=5.0
                )
            except asyncio.TimeoutError:
                print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Ä–∫–µ—Ä–æ–≤")

        print("‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def create_app() -> FastAPI:
    """–§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = FastAPI(
        lifespan=lifespan,
        title="Webhook Proxy Server",
        version="1.0",
        description="–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –º–µ–∂–¥—É TradingView –∏ Finandy",
        docs_url="/docs",
        redoc_url="/redoc"
    )

    # CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    app.include_router(api_router, prefix="/api/v1")

    # –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
    @app.get("/")
    async def root():
        return {
            "status": "running",
            "service": "webhook-proxy",
            "version": "1.0",
            "docs": "/docs"
        }

    return app


app = create_app()

if __name__ == "__main__":
    import uvicorn

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    signal.signal(signal.SIGINT, handle_shutdown)
    signal.signal(signal.SIGTERM, handle_shutdown)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=settings.port,
        log_level="info"
    )