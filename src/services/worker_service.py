import asyncio
import time
from typing import Dict
from config.settings import settings
from config import webhooks
from database.repository import SignalRepository  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢
from services.webhook_service import WebhookClient
from core.exceptions import WebhookSendException


class SignalWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""

    def __init__(self, symbol: str, queue_manager: 'QueueManager',
                 repository: SignalRepository, webhook_client: WebhookClient):
        self.symbol = symbol
        self.queue_manager = queue_manager
        self.repository = repository
        self.webhook_client = webhook_client
        self.last_sent = 0

    async def run(self) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä"""
        print(f"üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è {self.symbol}")

        while True:
            try:
                data, original_data, name, created_at = await self.queue_manager.get(self.symbol)
                await self._process_signal(data, original_data, name, created_at)
                self.queue_manager.task_done(self.symbol)
            except Exception as e:
                print(f"[{self.symbol}] ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")

    async def _process_signal(self, data: Dict, original_data: Dict,
                              name: str, created_at: float) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª"""
        webhook_url = webhooks.get_webhook_url(name)

        if not webhook_url:
            error_msg = f"No webhook found for: {name}"
            self._log_error(name, original_data, created_at, error_msg)
            return

        await self._rate_limit()

        try:
            status_code, response_text = await self.webhook_client.send(webhook_url, original_data)
            await self._handle_response(name, original_data, created_at, status_code, response_text)
        except WebhookSendException as e:
            self._log_error(name, original_data, created_at, str(e))

    async def _rate_limit(self) -> None:
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        now = time.time()
        delay = settings.rate_limit_ms / 1000  # Convert to seconds

        if now - self.last_sent < delay:
            await asyncio.sleep(delay - (now - self.last_sent))

        self.last_sent = time.time()

    async def _handle_response(self, name: str, original_data: Dict, created_at: float,
                               status_code: int, response_text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –≤–µ–±—Ö—É–∫–∞"""
        sent_at = time.time()

        if status_code == 200:
            status = f"sent {status_code}"
            print(f"[{self.symbol}] ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {status_code}")
        else:
            status = f"error {status_code}"
            print(f"[{self.symbol}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {status_code}")

        self.repository.log_signal(
            self.symbol, name, original_data, status, created_at,
            sent_at, status_code, response_text
        )

    def _log_error(self, name: str, original_data: Dict,
                   created_at: float, error_msg: str) -> None:
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ –ª–æ–≥"""
        self.repository.log_signal(
            self.symbol, name, original_data, f"error {error_msg}",
            created_at, None, None, error_msg
        )
        print(f"[{self.symbol}] ‚ùå {error_msg}")