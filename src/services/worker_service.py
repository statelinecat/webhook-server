# src/services/worker_service.py
import asyncio
import time
import os
import traceback
from typing import Dict
from config import webhooks
from database.repository import SignalRepository
from services.webhook_service import WebhookClient


class SignalWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""

    def __init__(
        self,
        symbol: str,
        queue_manager: "QueueManager",
        repository: SignalRepository,
        webhook_client: WebhookClient,
    ):
        self.symbol = symbol
        self.queue_manager = queue_manager
        self.repository = repository
        self.webhook_client = webhook_client
        self.last_sent = 0
        self.rate_limit_ms = int(os.getenv("RATE_LIMIT_MS", "300"))

    async def run(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞"""
        print(f"üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è {self.symbol}")

        while True:
            try:
                print(f"[{self.symbol}] ‚è≥ –û–∂–∏–¥–∞—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏...")
                item = await self.queue_manager.get(self.symbol)
                print(f"[{self.symbol}] üßµ –ü–æ–ª—É—á–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏")

                if isinstance(item, tuple) and len(item) == 4:
                    data, original_data, name, created_at = item
                    await self._process_signal(data, original_data, name, created_at)
                else:
                    error_msg = f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: {type(item)} (len={len(item) if hasattr(item, '__len__') else '?'})"
                    print(f"[{self.symbol}] ‚ùå {error_msg}")
                    self._log_error("unknown", {}, time.time(), error_msg)

                self.queue_manager.task_done(self.symbol)

            except Exception as e:
                error_msg = f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}"
                print(f"[{self.symbol}] ‚ùå {error_msg}")
                traceback.print_exc()

                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ task_done, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
                try:
                    self.queue_manager.task_done(self.symbol)
                except ValueError:
                    pass  # —É–∂–µ –ø–æ–º–µ—á–µ–Ω–æ

    async def _process_signal(
        self,
        data: Dict,
        original_data: Dict,
        name: str,
        created_at: float,
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Finandy"""
        try:
            normalized_name = name.strip().upper()
            print(
                f"[{self.symbol}] üîé raw name='{name}' (len={len(name)}), normalized='{normalized_name}'"
            )

            raw_url = webhooks.get_webhook_url(normalized_name)
            webhook_url = raw_url.strip() if raw_url else None

            print(f"[{self.symbol}] üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ URL: '{webhook_url}'")

            if not webhook_url or not webhooks.is_valid_webhook(webhook_url):
                error_msg = f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–µ–±—Ö—É–∫ –¥–ª—è '{normalized_name}': '{raw_url}'"
                self._log_error(normalized_name, original_data, created_at, error_msg)
                return

            await self._rate_limit()

            status_code, response_text = await self.webhook_client.send(
                webhook_url, original_data
            )
            await self._handle_response(
                normalized_name, original_data, created_at, status_code, response_text
            )

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}"
            print(f"[{self.symbol}] ‚ùå {error_msg}")
            self._log_error(name, original_data, created_at, error_msg)

    async def _rate_limit(self) -> None:
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–º–∏–Ω–∏–º—É–º 300 –º—Å –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏)"""
        now = time.time()
        delay = self.rate_limit_ms / 1000.0

        if now - self.last_sent < delay:
            sleep_time = delay - (now - self.last_sent)
            print(f"[{self.symbol}] ‚è∏Ô∏è –°–ø–∏–º {sleep_time:.3f} —Å–µ–∫")
            await asyncio.sleep(sleep_time)

        self.last_sent = time.time()

    async def _handle_response(
        self,
        name: str,
        original_data: Dict,
        created_at: float,
        status_code: int,
        response_text: str,
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Finandy"""
        sent_at = time.time()

        if status_code == 200:
            status = "sent"
            print(f"[{self.symbol}] ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {status_code}")
        else:
            status = "error"
            print(
                f"[{self.symbol}] ‚ö†Ô∏è –û—à–∏–±–∫–∞: {status_code} ‚Äî {response_text[:200]}"
            )

        self.repository.log_signal(
            symbol=self.symbol,
            name=name,
            data=original_data,
            status=status,
            created_at=created_at,
            sent_at=sent_at,
            response_code=status_code,
            response_text=response_text,
        )

    def _log_error(
        self,
        name: str,
        original_data: Dict,
        created_at: float,
        error_msg: str,
    ) -> None:
        """–ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏ –≤ –ë–î –∏ –∫–æ–Ω—Å–æ–ª—å"""
        self.repository.log_signal(
            symbol=self.symbol,
            name=name,
            data=original_data,
            status="error",
            created_at=created_at,
            sent_at=None,
            response_code=None,
            response_text=error_msg,
        )
        print(f"[{self.symbol}] ‚ùå –ó–∞–ø–∏—Å–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î: {error_msg}")
